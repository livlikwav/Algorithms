'''
dp는 왤캐 어려울까?
또 못풀었다 시간내에.
dp 유형만 자꾸 도전해보기

<문제 답안>
가능한 못생긴 수를 앞에서부터 하나씩 찾는 방법으로 해결한다.
2, 3, 5 를 오름차순으로 가장 작은 못생긴 수에 곱하는데,
list에 넣는거는 작은거부터 넣어야하므로,
2, 3, 5 곱하는 index 포인터를 3개 둔다.
그 index 포인터는 기계적으로 +1 씩 넘기면서 곱해서 넣으면 된다.

<lesson learned>
가장 작은 수에 2, 3, 5를 차례로 곱하면 된다는 생각은 했지만,
각각 포인터를 3개 두고, 제일 작은거 넣고 포인터 +1 하고 하는 알고리즘을 생각못했다.
계속 보고 이해하면 늘지 않을까? 화이팅

<Answer>
n = int(input())

ugly = [0] * n # 못생긴 수를 담기 위한 테이블(1차원 DP 테이블)
ugly[0] = 1 # 첫 번째 못생긴 수는 1

# 2배, 3배, 5배를 위한 인덱스
i2 = i3 = i5 = 0
# 처음에 곱셈값을 초기화
next2, next3, next5 = 2, 3, 5 

# 1부터 n까지의 못생긴 수를 찾기
for x in range(1, n):
    # 가능한 곱셈 결과 중에서 가장 작은 수를 선택
    ugly[x] = min(next2, next3, next5)
    # 인덱스에 따라서 곱셈 결과를 증가
    if ugly[x] == next2:
        i2 += 1
        next2 = ugly[i2] * 2
    if ugly[x] == next3:
        i3 += 1
        next3 = ugly[i3] * 3
    if ugly[x] == next5:
        i5 += 1
        next5 = ugly[i5] * 5

# n번째 못생긴 수를 출력
print(ugly[n - 1])
'''