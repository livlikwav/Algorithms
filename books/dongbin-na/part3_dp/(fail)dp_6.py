'''
<깨달은 점>
Edit distance 편집 거리 문제
-> 2차원 테이블을 통해, 각 부분 문자열의 최소 편집 거리를 갱신

1
dp 알고리즘을 완벽하게 이해하고, 처음보는 유형을 쉽게 푸는 것은 어려울 수 있다.
하지만 취업 시간은 제한되어 있으므로, 그 전까지는 포기하지 않고 차라리 유형을 다 외워서 풀어버리자.

2
명확히 구분되는 action에 집중하여 점화식을 세워보자.
이 문제의 경우 3가지 연산 (삽입, 삭제, 치환)
이전 연산 3개에 대해서 최소 비용을 찾아, 새로운 연산의 최소 편집 거리로 대입하는 것이 핵심

3
이 문제 틀린 이유는 접근방법 자체도 전혀 dp스럽지 못했다.
문제를 구현 문제 풀듯이 풀었다.
또는 그리디 알고리즘 풀듯이 풀었다.

<답안 노트>
최소 편집 거리 유형!
-> 2차원 테이블 가지고, 글자별로 최소 편집 거리를 갱신한다.
-> 단, 공집합(빈 문자열)도 포함하기.

dp[i][j]의 의미.
i 문자열을 j 문자열로 만들기 위한 최소 편집 거리
단, i가 0abc 차례로 해서 c 일 경우,
c 하나를 말하는게 아니라, 'abc' 문자열을 말하는 것이다.

점화식
두 문자가 같은 경우
dp[i][j] = dp[i-1][j-1]
두 문자가 다른 경우
dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])

테이블의 가장 오른쪽 아래에 있는 값이 구하고자 하는 최소 편집거리가 된다.
즉 dp[A 문자열 길이][B 문자열 길이]

<답안>
# 최소 편집 거리(Edit distance) 계산을 위한 다이나믹 프로그래밍
def edit_dist(str1, str2):
    n = len(str1)
    m = len(str2)

    # 다이나믹 프로그래밍을 위한 2차원 DP 테이블 초기화
    dp = [[0] * (m + 1) for _ in range(n + 1)]

    # DP 테이블 초기 설정
    for i in range(1, n + 1):
        dp[i][0] = i
    for j in range(1, m + 1):
        dp[0][j] = j
    
    # 최소 편집 거리 갱신
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            # 문자가 같다면, 왼쪽 위에 해당하는 수를 그대로 대입
            if str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
                # 문자가 다르다면, 3가지 경우 중에서 최솟값 찾기
                else: # 삽입(왼쪽), 삭제(위쪽), 교체(왼쪽 위) 중에서 최소 비용을 찾아 대입
                    dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])

    return dp[n][m]

# 두 문자열을 입력받기
str1 = input()
str2 = input()

# 최소 편집 거리 출력
print(edit_dist(str1, str2))
'''